/** * @package : server.poloFritto * @author : Yein * @fileName : DefenseTowerWave.java * @date : 2019. 12. 1. */package server.polofritto;import client.MapleClient;import server.Randomizer;import server.Timer.EventTimer;import server.life.MapleLifeFactory;import server.life.MapleMonster;import tools.packet.CField;import tools.packet.SLFCGPacket;import java.awt.*;import java.util.ArrayList;import java.util.List;import java.util.concurrent.ScheduledFuture;public class BountyHunting {    private int stage;    private ScheduledFuture<?> sc, sch;    private List<List<Integer>> waveData = new ArrayList<>();    public BountyHunting(int stage) {        this.stage = stage;    }    public int getStage() {        return stage;    }    public void setStage(int wave) {        this.stage = wave;    }    public void updateDefenseWave(MapleClient c) {        c.getSession().writeAndFlush(SLFCGPacket.setBountyHuntingStage(stage));    }    public void updateNewWave(MapleClient c) {        c.getSession().writeAndFlush(CField.environmentChange("defense/count", 16));        int bonusRate = Randomizer.rand(5, 10);        EventTimer.getInstance().schedule(new Runnable() {            public void run() {                if (c.getPlayer().getMapId() == 993000000) {                    c.getSession().writeAndFlush(CField.environmentChange("defense/wave/" + stage, 16));                    c.getSession().writeAndFlush(CField.environmentChange("killing/first/start", 16));                    for (int wave : waveData.get(stage - 1)) {                        MapleMonster m = MapleLifeFactory.getMonster(wave);                        m.getStats().setLevel((short) c.getPlayer().getPoloMobLevel());                        m.getStats().setHp((long) c.getPlayer().getPoloMobHp() * 2);                        if (m.getStats().isBoss()) {                            m.getStats().setExp((int) c.getPlayer().getPoloMobexp() * 100);                        } else {                            m.getStats().setExp((int) c.getPlayer().getPoloMobexp() * bonusRate);                        }                        c.getPlayer().getMap().spawnMonsterOnGroundBelow(m, new Point(Randomizer.rand(500, 700) * -1, 126));                        c.getPlayer().getMap().spawnMonsterOnGroundBelow(m, new Point(Randomizer.rand(500, 700), 126));                    }                }            }        }, 3 * 1000);        EventTimer.getInstance().schedule(new Runnable() {            public void run() {                checkFinish(c);            }        }, 8000);    }    public void checkFinish(MapleClient c) {        sch = EventTimer.getInstance().register(new Runnable() {            public void run() {                if (c != null && c.getPlayer() != null && c.getPlayer().getMap() != null) {                    if (c.getPlayer().getMap().getAllMonstersThreadsafe().size() == 0) {                        if (stage < 5 && c.getPlayer().getMapId() == 993000000) {                            stage++;                            if (sch != null) {                                sch.cancel(true);                            }                            updateDefenseWave(c);                            updateNewWave(c);                        } else {                            if (sc != null) {                                sc.cancel(true);                            }                            if (sch != null) {                                sch.cancel(true);                            }                            c.getSession().writeAndFlush(CField.environmentChange("killing/clear", 16));                            EventTimer.getInstance().schedule(new Runnable() {                                public void run() {                                    if (c != null && c.getPlayer() != null && c.getPlayer().getMapId() == 993000000) {                                        c.getPlayer().warp(993000600);                                    }                                }                            }, 2000);                        }                    }                }            }        }, 1000);    }    public void insertWaveData() {        List<Integer> waves = new ArrayList<>();        // 1웨이브        waves.add(9830000);        waves.add(9830000);        waves.add(9830000);        waves.add(9830000);        waves.add(9830000);        waves.add(9830001);        waves.add(9830001);        waves.add(9830000);        waves.add(9830000);        waves.add(9830000);        waves.add(9830000);        waves.add(9830000);        waveData.add(waves);        List<Integer> waves2 = new ArrayList<>();        //2웨이브        waves2.add(9830002);        waves2.add(9830002);        waves2.add(9830002);        waves2.add(9830002);        waves2.add(9830002);        waves2.add(9830004);        waves2.add(9830004);        waves2.add(9830003);        waves2.add(9830003);        waves2.add(9830003);        waves2.add(9830003);        waves2.add(9830003);        waveData.add(waves2);        List<Integer> waves3 = new ArrayList<>();        //3웨이브        waves3.add(9830005);        waves3.add(9830005);        waves3.add(9830005);        waves3.add(9830005);        waves3.add(9830005);        waves3.add(9830006);        waves3.add(9830006);        waves3.add(9830007);        waves3.add(9830007);        waves3.add(9830007);        waves3.add(9830007);        waves3.add(9830007);        waves3.add(9830008);        waveData.add(waves3);        List<Integer> waves4 = new ArrayList<>();        //4웨이브        waves4.add(9830009);        waves4.add(9830009);        waves4.add(9830009);        waves4.add(9830009);        waves4.add(9830009);        waves4.add(9830010);        waves4.add(9830010);        waves4.add(9830010);        waves4.add(9830010);        waves4.add(9830010);        waves4.add(9830011);        waves4.add(9830011);        waves4.add(9830011);        waves4.add(9830011);        waves4.add(9830011);        waves4.add(9830012);        waves4.add(9830012);        waves4.add(9830012);        waves4.add(9830012);        waves4.add(9830012);        waves4.add(9830013);        waveData.add(waves4);        List<Integer> waves5 = new ArrayList<>();        //5웨이브        waves5.add(9830014);        waves5.add(9830014);        waves5.add(9830014);        waves5.add(9830014);        waves5.add(9830014);        waves5.add(9830015);        waves5.add(9830015);        waves5.add(9830015);        waves5.add(9830015);        waves5.add(9830015);        waves5.add(9830016);        waves5.add(9830016);        waves5.add(9830016);        waves5.add(9830016);        waves5.add(9830016);        waves5.add(9830017);        waves5.add(9830017);        waves5.add(9830017);        waves5.add(9830017);        waves5.add(9830017);        waves5.add(9830018);        waveData.add(waves5);    }    public void start(MapleClient c) {        updateDefenseWave(c);        insertWaveData();        c.getSession().writeAndFlush(CField.startMapEffect("놈들이 사방에서 몰려오는군! 녀석들을 처치하면 막대한 경험치를 얻을 수 있다!", 5120159, true));        c.getSession().writeAndFlush(CField.getClock(3 * 60));        updateNewWave(c);        sc = EventTimer.getInstance().schedule(new Runnable() {            public void run() {                if (sc != null) {                    sc.cancel(true);                }                if (sch != null) {                    sch.cancel(true);                }                if (c.getPlayer().getMapId() == 993000000) {                    c.getPlayer().warp(993000600);                }            }        }, 3 * 60 * 1000);    }    public ScheduledFuture<?> getSch() {        return sch;    }    public void setSch(ScheduledFuture<?> sch) {        this.sch = sch;    }    public List<List<Integer>> getWaveData() {        return waveData;    }    public void setWaveData(List<List<Integer>> waveData) {        this.waveData = waveData;    }    public ScheduledFuture<?> getSc() {        return sc;    }    public void setSc(ScheduledFuture<?> sc) {        this.sc = sc;    }}