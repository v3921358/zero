/** * @package : server.poloFritto * @author : Yein * @fileName : DefenseTowerWave.java * @date : 2019. 12. 1. */package server.polofritto;import client.MapleClient;import server.Randomizer;import server.Timer.EventTimer;import server.life.MapleLifeFactory;import server.life.MapleMonster;import tools.packet.CField;import tools.packet.CWvsContext;import tools.packet.SLFCGPacket;import java.awt.*;import java.util.ArrayList;import java.util.List;import java.util.concurrent.ScheduledFuture;public class DefenseTowerWave {    private int wave, life;    private ScheduledFuture<?> sc, sch;    private List<List<Integer>> waveData = new ArrayList<>();    public DefenseTowerWave(int wave, int life) {        this.wave = wave;        this.life = life;    }    public int getWave() {        return wave;    }    public void setWave(int wave) {        this.wave = wave;    }    public int getLife() {        return life;    }    public void setLife(int life) {        this.life = life;    }    public void updateDefenseWave(MapleClient c) {        c.getSession().writeAndFlush(SLFCGPacket.setTowerDefenseWave(wave));    }    public void updateDefenseLife(MapleClient c) {        c.getSession().writeAndFlush(SLFCGPacket.setTowerDefenseLife(life));    }    public void updateNewWave(MapleClient c) {        c.getSession().writeAndFlush(CField.environmentChange("defense/count", 16));        EventTimer.getInstance().schedule(new Runnable() {            public void run() {                c.getSession().writeAndFlush(CField.environmentChange("defense/wave/" + wave, 16));                c.getSession().writeAndFlush(CField.environmentChange("killing/first/start", 16));                int time = 0;                int bonusRate = Randomizer.rand(2, 5);                if (c.getPlayer().getMapId() == 993000100) {                    for (int wave : waveData.get(wave - 1)) {                        time++;                        EventTimer.getInstance().schedule(new Runnable() {                            public void run() {                                if (c.getPlayer().getMapId() == 993000100) {                                    MapleMonster m = MapleLifeFactory.getMonster(wave);                                    m.getStats().setLevel((short) c.getPlayer().getPoloMobLevel());                                    m.getStats().setHp((long) c.getPlayer().getPoloMobHp() * 5);                                    if (m.getStats().isBoss()) {                                        m.getStats().setExp((int) c.getPlayer().getPoloMobexp() * 10);                                    } else {                                        m.getStats().setExp((int) c.getPlayer().getPoloMobexp() * bonusRate);                                    }                                    c.getPlayer().getMap().spawnMonsterOnGroundBelow(m, new Point(363, 165));                                }                            }                        }, 1000 * time);                    }                }            }        }, 3 * 1000);        EventTimer.getInstance().schedule(new Runnable() {            public void run() {                checkFinish(c);            }        }, (waveData.get(wave - 1).size() + 5) * 1000);    }    public void checkFinish(MapleClient c) {        sch = EventTimer.getInstance().register(new Runnable() {            public void run() {                if (c != null && c.getPlayer() != null && c.getPlayer().getMap() != null) {                    if (c.getPlayer().getMap().getAllMonstersThreadsafe().size() == 0) {                        if (wave < 3 && c.getPlayer().getMapId() == 993000100) {                            wave++;                            if (sch != null) {                                sch.cancel(false);                            }                            c.getSession().writeAndFlush(CWvsContext.getTopMsg("WAVE를 막아냈습니다. 다음 WAVE를 준비해주세요."));                            EventTimer.getInstance().schedule(new Runnable() {                                public void run() {                                    updateDefenseWave(c);                                    updateNewWave(c);                                }                            }, 2000);                        } else {                            if (sc != null) {                                sc.cancel(true);                            }                            if (sch != null) {                                sch.cancel(true);                            }                            c.getSession().writeAndFlush(CField.environmentChange("killing/clear", 16));                            EventTimer.getInstance().schedule(new Runnable() {                                public void run() {                                    if (c != null && c.getPlayer() != null && c.getPlayer().getMapId() == 993000100) {                                        c.getPlayer().warp(993000600);                                    }                                }                            }, 2000);                        }                    }                }            }        }, 1000);    }    public void insertWaveData() {        List<Integer> waves = new ArrayList<>();        // 1웨이브        waves.add(9831000);        waves.add(9831000);        waves.add(9831000);        waves.add(9831000);        waves.add(9831000);        waves.add(9831000);        waves.add(9831000);        waves.add(9831000);        waves.add(9831000);        waves.add(9831000);        waves.add(9831001);        waves.add(9831001);        waves.add(9831001);        waves.add(9831001);        waves.add(9831001);        waves.add(9831001);        waves.add(9831001);        waves.add(9831001);        waves.add(9831001);        waves.add(9831001);        waves.add(9831002);        waves.add(9831002);        waves.add(9831002);        waves.add(9831002);        waveData.add(waves);        List<Integer> waves2 = new ArrayList<>();        //2웨이브        waves2.add(9831006);        waves2.add(9831006);        waves2.add(9831006);        waves2.add(9831006);        waves2.add(9831006);        waves2.add(9831006);        waves2.add(9831006);        waves2.add(9831006);        waves2.add(9831006);        waves2.add(9831006);        waves2.add(9831007);        waves2.add(9831007);        waves2.add(9831007);        waves2.add(9831007);        waves2.add(9831007);        waves2.add(9831007);        waves2.add(9831007);        waves2.add(9831007);        waves2.add(9831007);        waves2.add(9831007);        waves2.add(9831008);        waves2.add(9831008);        waves2.add(9831008);        waves2.add(9831008);        waveData.add(waves2);        List<Integer> waves3 = new ArrayList<>();        //3웨이브        waves3.add(9831012);        waves3.add(9831012);        waves3.add(9831012);        waves3.add(9831012);        waves3.add(9831012);        waves3.add(9831012);        waves3.add(9831012);        waves3.add(9831012);        waves3.add(9831014);        waves3.add(9831014);        waves3.add(9831014);        waves3.add(9831014);        waveData.add(waves3);    }    public void attacked(MapleClient c) {        life--;        updateDefenseLife(c);        if (life <= 0) {            if (sc != null) {                sc.cancel(false);            }            if (sch != null) {                sch.cancel(false);            }            c.getSession().writeAndFlush(CField.environmentChange("killing/fail", 16));            if (c != null && c.getPlayer() != null && c.getPlayer().getMapId() == 993000100) {                c.getPlayer().warp(993000600);            }        }    }    public void start(MapleClient c) {        setLife(20);        updateDefenseWave(c);        updateDefenseLife(c);        insertWaveData();        c.getSession().writeAndFlush(CField.startMapEffect("놈들이 겁도 없이 마을을 습격하는군! 모조리 해치워라!", 5120159, true));        c.getSession().writeAndFlush(CField.getClock(5 * 60));        updateNewWave(c);        sc = EventTimer.getInstance().schedule(new Runnable() {            public void run() {                if (sc != null) {                    sc.cancel(true);                }                if (sch != null) {                    sch.cancel(true);                }                if (c.getPlayer().getMapId() == 993000100) {                    c.getPlayer().warp(993000600);                }            }        }, 5 * 60 * 1000);    }    public ScheduledFuture<?> getSch() {        return sch;    }    public void setSch(ScheduledFuture<?> sch) {        this.sch = sch;    }    public List<List<Integer>> getWaveData() {        return waveData;    }    public void setWaveData(List<List<Integer>> waveData) {        this.waveData = waveData;    }    public ScheduledFuture<?> getSc() {        return sc;    }    public void setSc(ScheduledFuture<?> sc) {        this.sc = sc;    }}